generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  areaCoordinatorId Int?     @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  areaCoordinator   User?    @relation("AreaCoordinator", fields: [areaCoordinatorId], references: [id])
  users             User[]   @relation("UserRegion")

  @@map("regions")
}

model User {
  id                    Int                   @id @default(autoincrement())
  username              String                @unique
  passwordHash          String                @map("password_hash")
  email                 String?               @unique
  fullName              String                @map("full_name")
  address               String?
  phone                 String?
  regionId              Int?                  @map("region_id")
  coordinatorId         Int?                  @map("coordinator_id")
  createdById           Int?                  @map("created_by")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  agentId               String?               @map("agent_id")
  role                  String
  status                String                @default("active")
  assignedTemplates     AgentTicketTemplate[]
  processedTransactions BalanceTransaction[]  @relation("TransactionProcessedBy")
  balanceTransactions   BalanceTransaction[]
  createdBetLimits      BetLimit[]
  commissions           Commission[]
  inputDrawResults      DrawResult[]
  notifications         Notification[]
  areaCoordinator       Region?               @relation("AreaCoordinator")
  sales                 Sale[]
  updatedSettings       SystemSetting[]
  ticketReprints        TicketReprint[]
  createdTemplates      TicketTemplate[]
  agentTickets          Ticket[]              @relation("TicketAgent")
  tickets               Ticket[]
  balance               UserBalance?
  coordinator           User?                 @relation("UserCoordinator", fields: [coordinatorId], references: [id])
  agents                User[]                @relation("UserCoordinator")
  createdBy             User?                 @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers          User[]                @relation("UserCreatedBy")
  region                Region?               @relation("UserRegion", fields: [regionId], references: [id])
  createdPrizeConfigs   PrizeConfiguration[]  @relation("PrizeConfigCreatedBy")
  updatedPrizeConfigs   PrizeConfiguration[]  @relation("PrizeConfigUpdatedBy")

  @@map("users")
}

model UserBalance {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique @map("user_id")
  currentBalance Float    @default(0.00) @map("current_balance")
  lastUpdated    DateTime @default(now()) @map("last_updated")
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])

  @@map("user_balances")
}

model BalanceTransaction {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  amount          Float
  transactionType String   @map("transaction_type")
  description     String?
  referenceId     String?  @map("reference_id")
  processedById   Int?     @map("processed_by")
  createdAt       DateTime @default(now())
  processedBy     User?    @relation("TransactionProcessedBy", fields: [processedById], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("balance_transactions")
}

model Draw {
  id               Int               @id @default(autoincrement())
  drawDate         DateTime          @map("draw_date")
  drawTime         DrawTime          @map("draw_time")
  winningNumber    String?           @map("winning_number")
  status           DrawStatus        @default(open)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  cutoffTime       DateTime          @map("cutoff_time")
  betLimitsPerDraw BetLimitPerDraw[]
  commissions      Commission[]
  currentBetTotals CurrentBetTotal[]
  drawResult       DrawResult?
  notifications    Notification[]
  sales            Sale[]
  tickets          Ticket[]
  winningTickets   WinningTicket[]

  @@unique([drawDate, drawTime])
  @@map("draws")
}

model Ticket {
  id              Int             @id @default(autoincrement())
  ticketNumber    String          @unique @map("ticket_number")
  userId          Int             @map("user_id")
  drawId          Int             @map("draw_id")
  totalAmount     Float           @map("total_amount")
  status          TicketStatus    @default(pending)
  qrCode          String          @map("qr_code")
  templateId      Int             @default(1) @map("template_id")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  agentId         Int             @map("agent_id")
  betDate         DateTime        @map("bet_date")
  reprintCount    Int             @default(0) @map("reprint_count")
  sequenceNumber  String          @map("sequence_number")
  bets            Bet[]
  notifications   Notification[]
  reprints        TicketReprint[]
  agent           User            @relation("TicketAgent", fields: [agentId], references: [id])
  draw            Draw            @relation(fields: [drawId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  winningTickets  WinningTicket[]

  @@map("tickets")
}

model Bet {
  id             Int      @id @default(autoincrement())
  ticketId       Int      @map("ticket_id")
  betType        BetType  @map("bet_type")
  betCombination String   @map("bet_combination")
  betAmount      Float    @map("bet_amount")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ticket         Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("bets")
}

model Sale {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  drawId      Int      @map("draw_id")
  betType     BetType  @map("bet_type")
  totalAmount Float    @map("total_amount")
  ticketCount Int      @map("ticket_count")
  createdAt   DateTime @default(now())
  draw        Draw     @relation(fields: [drawId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, drawId, betType])
  @@map("sales")
}

model Commission {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  drawId           Int      @map("draw_id")
  commissionRate   Float    @map("commission_rate")
  commissionAmount Float    @map("commission_amount")
  createdAt        DateTime @default(now())
  draw             Draw     @relation(fields: [drawId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@map("commissions")
}

model WinningTicket {
  id          Int       @id @default(autoincrement())
  ticketId    Int       @map("ticket_id")
  drawId      Int       @map("draw_id")
  prizeAmount Float     @map("prize_amount")
  isClaimed   Boolean   @default(false) @map("is_claimed")
  claimedAt   DateTime? @map("claimed_at")
  createdAt   DateTime  @default(now())
  draw        Draw      @relation(fields: [drawId], references: [id])
  ticket      Ticket    @relation(fields: [ticketId], references: [id])

  @@map("winning_tickets")
}

model Notification {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  title           String
  message         String
  type            String
  isRead          Boolean  @default(false) @map("is_read")
  relatedTicketId Int?     @map("related_ticket_id")
  relatedDrawId   Int?     @map("related_draw_id")
  createdAt       DateTime @default(now())
  relatedDraw     Draw?    @relation(fields: [relatedDrawId], references: [id])
  relatedTicket   Ticket?  @relation(fields: [relatedTicketId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model BetLimit {
  id          Int      @id @default(autoincrement())
  betType     BetType  @unique @map("bet_type")
  limitAmount Float    @map("limit_amount")
  isActive    Boolean  @default(true) @map("is_active")
  createdById Int?     @map("created_by")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation(fields: [createdById], references: [id])

  @@map("bet_limits")
}

model CurrentBetTotal {
  id             Int      @id @default(autoincrement())
  drawId         Int      @map("draw_id")
  betCombination String   @map("bet_combination")
  betType        BetType  @map("bet_type")
  totalAmount    Float    @default(0.00) @map("total_amount")
  ticketCount    Int      @default(0) @map("ticket_count")
  updatedAt      DateTime @updatedAt
  draw           Draw     @relation(fields: [drawId], references: [id])

  @@unique([drawId, betCombination, betType])
  @@map("current_bet_totals")
}

model SystemSetting {
  id           Int      @id @default(autoincrement())
  settingKey   String   @unique @map("setting_key")
  settingValue String   @map("setting_value")
  description  String?
  updatedById  Int?     @map("updated_by")
  updatedAt    DateTime @updatedAt @map("updated_at")
  updatedBy    User?    @relation(fields: [updatedById], references: [id])

  @@map("system_settings")
}

model TicketTemplate {
  id             Int                   @id @default(autoincrement())
  name           String                @unique
  design         Json
  isActive       Boolean               @default(true) @map("is_active")
  createdById    Int?                  @map("created_by")
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  assignedAgents AgentTicketTemplate[]
  createdBy      User?                 @relation(fields: [createdById], references: [id])

  @@map("ticket_templates")
}

model AgentTicketTemplate {
  id         Int            @id @default(autoincrement())
  agentId    Int            @map("agent_id")
  templateId Int            @map("template_id")
  assignedAt DateTime       @default(now()) @map("assigned_at")
  agent      User           @relation(fields: [agentId], references: [id])
  template   TicketTemplate @relation(fields: [templateId], references: [id])

  @@unique([agentId, templateId])
  @@map("agent_ticket_templates")
}

model DrawResult {
  id            Int      @id @default(autoincrement())
  drawId        Int      @unique @map("draw_id")
  winningNumber String   @map("winning_number")
  inputById     Int      @map("input_by")
  inputAt       DateTime @default(now()) @map("input_at")
  isOfficial    Boolean  @default(true) @map("is_official")
  draw          Draw     @relation(fields: [drawId], references: [id])
  inputBy       User     @relation(fields: [inputById], references: [id])

  @@map("draw_results")
}

model BetLimitPerDraw {
  id             Int      @id @default(autoincrement())
  drawId         Int      @map("draw_id")
  betCombination String   @map("bet_combination")
  betType        BetType  @map("bet_type")
  currentAmount  Float    @default(0.00) @map("current_amount")
  limitAmount    Float    @map("limit_amount")
  isSoldOut      Boolean  @default(false) @map("is_sold_out")
  updatedAt      DateTime @updatedAt
  draw           Draw     @relation(fields: [drawId], references: [id])

  @@unique([drawId, betCombination, betType])
  @@map("bet_limits_per_draw")
}

model WinningPrize {
  id          Int      @id @default(autoincrement())
  betType     BetType  @unique @map("bet_type")
  prizeAmount Float    @map("prize_amount")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("winning_prizes")
}

model PrizeConfiguration {
  id              Int      @id @default(autoincrement())
  betType         BetType  @map("bet_type")
  multiplier      Float    @default(450.0) // Prize multiplier (e.g., 450 for 450x)
  baseAmount      Float    @default(10.0) @map("base_amount") // Base bet amount for calculation
  basePrize       Float    @default(4500.0) @map("base_prize") // Prize for base amount
  description     String?  // Description of this configuration
  isActive        Boolean  @default(true) @map("is_active")
  createdById     Int      @map("created_by_id")
  updatedById     Int?     @map("updated_by_id")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  createdBy       User     @relation("PrizeConfigCreatedBy", fields: [createdById], references: [id])
  updatedBy       User?    @relation("PrizeConfigUpdatedBy", fields: [updatedById], references: [id])

  @@unique([betType])
  @@map("prize_configurations")
}

model TicketReprint {
  id            Int      @id @default(autoincrement())
  ticketId      Int      @map("ticket_id")
  reprintedById Int      @map("reprinted_by_id")
  reprintNumber Int      @map("reprint_number")
  createdAt     DateTime @default(now())
  reprintedBy   User     @relation(fields: [reprintedById], references: [id])
  ticket        Ticket   @relation(fields: [ticketId], references: [id])

  @@map("ticket_reprints")
}

model SystemFunction {
  id              Int                      @id @default(autoincrement())
  name            String                   @unique
  key             String                   @unique
  description     String?
  category        String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  isActive        Boolean                  @default(true) @map("is_active")
  rolePermissions RoleFunctionPermission[]

  @@map("system_functions")
}

model RoleFunctionPermission {
  id         Int            @id @default(autoincrement())
  role       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  functionId Int            @map("function_id")
  isEnabled  Boolean        @default(true) @map("is_enabled")
  function   SystemFunction @relation(fields: [functionId], references: [id])

  @@unique([role, functionId])
  @@map("role_function_permissions")
}

model PrizeConfiguration {
  id          Int      @id @default(autoincrement())
  betType     BetType  @unique @map("bet_type")
  multiplier  Float
  baseAmount  Float    @map("base_amount")
  basePrize   Float    @map("base_prize")
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdById Int      @map("created_by")
  updatedById Int?     @map("updated_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   User     @relation("PrizeConfigCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?    @relation("PrizeConfigUpdatedBy", fields: [updatedById], references: [id])

  @@map("prize_configurations")
}

enum UserRole {
  superadmin
  admin
  area_coordinator
  coordinator
  agent
  operator
}

enum BetType {
  standard
  rambolito
}

enum TicketStatus {
  pending
  validated
  paid
  cancelled
}

enum DrawStatus {
  open
  closed
  settled
}

enum DrawTime {
  twoPM
  fivePM
  ninePM
}

enum AccountStatus {
  active
  inactive
  suspended
}
